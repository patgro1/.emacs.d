#+TITLE: Emacs configuration
#+PROPERTY: header-args :tangle init.el

* Basic configuration
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  ;; the t parameter apends to the hook, instead of prepending
  ;; this means it'd be run after other hooks that might fiddle
  ;; with the frame size
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+end_src

** Packages
*** Setup use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
	  use-package-expand-minimally t))
  (require 'use-package)
#+END_SRC
*** Babel
We will be using babel to tangle this file into an init.el file
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** IVY, Counsel and Swiper
#+begin_src emacs-lisp
  (use-package counsel)
  (use-package ivy
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1)
    (global-set-key (kbd "M-x") 'counsel-M-x))
  (use-package swiper)
#+end_src

*** Whichkey
I like to have which key running to help with the binding I am not familiar with. I do not set anything particular except the threshold so it not a burden to maintain it.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-idle-delay 0.3)
    (which-key-mode))
#+end_src

* Theme and UI
** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "FiraCode Nerd Font" :height 150)
#+end_src
#+begin_src emacs-lisp
  (use-package doom-themes
  :config
  (load-theme 'doom-material t))
#+end_src
#+begin_src emacs-lisp
  (use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src
* Evil-mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (evil-set-leader 'normal (kbd "SPC")))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Global Keybindings with evil
#+begin_src emacs-lisp
  (evil-define-key 'normal 'global (kbd "<leader>bb") 'switch-to-buffer)
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status))
  (evil-define-key 'normal 'global (kbd "<leader>gg") 'magit-status)
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :pin melpa-stable
    :init
    (projectile-mode +1)
    :config
    (setq projectile-indexing-method 'alien)
    (setq projectile-project-search-path '("~/workspace")))
    ;(projectile-mode))
  (evil-define-key 'normal 'global (kbd "<leader><SPC>") 'projectile-find-file)
  (evil-define-key 'normal 'global (kbd "<leader>pp") 'projectile-switch-project)
  (evil-define-key 'normal 'global (kbd "<leader>pb") 'projectile-switch-to-buffer)
#+end_src

* Org-mode configuration
** Structured templates
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+END_SRC

;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
